name: Sample Build and Test Pipeline

trigger:
  branches:
    include:
      - master

pr:
  drafts: false
  autoCancel: true
  branches:
    include:
      - '*'

variables:
  WF_REPO: DARMA-tasking/workflows
  WF_BRANCH: master

jobs:
- job: getMatrix
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Get matrix'
  steps:
    # Note: Filtering the test environments
    # A jq query can be used to filter the matrix of test environments
    # - All (default):           `matrix=$(cat azure.json | jq '.matrix')`
    # - CLang only:              `matrix=$(cat azure.json | jq '.matrix | map(select(.label | contains("clang")))')`
    # - gcc>=11:                 `matrix=$(cat azure.json | jq '.matrix | map(select(.name | test("gcc-[1-9][1-9]+")))')`
    # - gcc>=11|clang>=14        `matrix=$(cat azure.json | jq '.matrix | map(select(.name | test("gcc-[1-9][1-9]+-|clang-[1-9][2-9]+")))')`
    - bash: |
        wget https://raw.githubusercontent.com/${{ variables.WF_REPO }}/refs/heads/${{ variables.WF_BRANCH }}/ci/shared/matrix/azure.json
        matrix=$(cat azure.json | jq -c '.matrix')
        echo "##vso[task.setvariable variable=matrix;isOutput=true]$matrix"
      displayName: 'Get matrix'
      name: getMatrixStep
- job: run
  displayName: 'Run'
  dependsOn: getMatrix
  strategy:
    matrix: $[ dependencies.getMatrix.outputs['getMatrixStep.matrix'] ]
  pool:
    vmImage: $(vmImage)
  timeoutInMinutes: 180
  variables:
    TS_YEAR: ~
    TS_MONTH: ~
    TS_DAY: ~
    TS: ~
    BUILD_DIR: /opt/foo/build
    OUTPUT_DIR: /opt/foo/output
    CCACHE_DIR: /opt/foo/build/ccache
    COVERAGE_ENABLED: 0
    JUNIT_REPORT_PATH: /opt/foo/output/junit.xml
    cache_name: $(name)
  steps:
    - checkout: self
      fetchDepth: 0
    - bash: |
        echo "Environment=$(label)"
        echo "Runner=$(vmImage)"
        if [ "$(image)" != "" ]
        then
          echo "> With Docker Image=$(image)"
        else
          echo "> With Runner Setup=$(setup)"
        fi
      displayName: Display configuration
    - bash: |
        if [ "$(name)" == "wf-amd64-ubuntu-22.04-gcc-12-cpp" ]
        then
          echo "##vso[task.setvariable variable=COVERAGE_ENABLED]1"
        fi
        if [[ "$(image)" == "" ]]; then
          echo "::group::Setup in runner"
          echo "Set setup permissions..."
          sudo mkdir -p /opt
          sudo chown $(whoami) /opt
          wget -O setup.sh https://raw.githubusercontent.com/${{ variables.CI_REPO }}/refs/heads/${{ variables.CI_BRANCH }}/ci/shared/scripts/setup-$(setup).sh
          chmod +x setup.sh
          export WF_SETUP_ID=$(setup)
          ./setup.sh
          echo "::endgroup::"
        elif [[ "$(image)" != "" ]]; then
          echo "::group::Pull Docker image"
          docker image pull $(image)
          echo "::endgroup::"
        fi
      displayName: Set up dependencies
    - bash: |
        echo "##vso[task.setvariable variable=TS_YEAR]$(date -u +%Y)"
        echo "##vso[task.setvariable variable=TS_MONTH]$(date -u +%m)"
        echo "##vso[task.setvariable variable=TS_DAY]$(date -u +%d)"
        echo "##vso[task.setvariable variable=TS]$(date -u +%H%M%S)"
      displayName: Build timestamp for caching
    - task: Cache@2
      displayName: Update cache
      continueOnError: true
      inputs:
        securityNamespace: cache
        key: $(Agent.OS) | "$(cache_name)" | $(TS_YEAR) | $(TS_MONTH) | $(TS_DAY) | $(TS)
        path: $(CCACHE_DIR)
        restoreKeys: |
          $(Agent.OS) | "$(cache_name)" | $(TS_YEAR) | $(TS_MONTH) | $(TS_DAY)
          $(Agent.OS) | "$(cache_name)" | $(TS_YEAR) | $(TS_MONTH)
          $(Agent.OS) | "$(cache_name)" | $(TS_YEAR)
          $(Agent.OS) | "$(cache_name)"
    - bash: |
        mkdir -p $(CCACHE_DIR)
        WORKSPACE=$(Pipeline.Workspace)/s
        if [[ "$(image)" != "" ]]; then
          WORKSPACE=/workspace
        fi
        CMD='
          cd '${WORKSPACE}'; \
          ls -l; \
          chmod +x ./build.sh; \
          \
          FOO_COVERAGE_ENABLED="$(COVERAGE_ENABLED)" \
          FOO_TEST_REPORT="$(JUNIT_REPORT_PATH)" \
          ./build.sh'
        echo "Running ${CMD}"
        if [[ "$(image)" == "" ]]; then
          bash -c "export $(cat .env | sed '/^[[:blank:]]*#/d;s/#.*//' | xargs) && $CMD";
        else
          docker run \
            --name test-container \
            --env-file .env \
            -w $WORKSPACE \
            -v $(Pipeline.Workspace)/s:/workspace \
            -v $(BUILD_DIR):/opt/foo/build \
            -v $(OUTPUT_DIR):/opt/foo/output \
            -e CI="1" \
            -e https_proxy="" \
            -e http_proxy="" \
            $(image) \
            bash -c "$CMD"
          exit $(docker container inspect --format '{{.State.ExitCode}}' test-container)
        fi
        if [ -f "$FOO_TEST_REPORT" ]; then
          echo "##vso[task.setvariable variable=JUNIT_REPORT_PATH]${FOO_TEST_REPORT}"
        fi
      displayName: PR tests
    - task: PublishTestResults@2
      displayName: Tests ($(name))
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: $(JUNIT_REPORT_PATH)

    - task: PublishPipelineArtifact@1
      displayName: Upload artifacts
      continueOnError: true
      inputs:
        targetPath: $(OUTPUT_DIR)
        artifact: foo-output-$(name)
        publishLocation: 'pipeline'

    # FEAT: include also coverage reporting for Azure (require cobertura or JaCoCo format)
    # task: PublishCodeCoverageResults@1
