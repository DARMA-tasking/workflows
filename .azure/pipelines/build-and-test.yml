# Template workflow (Azure Pipelines). VT example.

# Build and test a project in all available setup configurations provided by DARMA-taking/workflows.
# See also: Github version at .github/workflows/build-and-test.yml

name: PR tests (project test example)

trigger:
  branches:
    include:
      - master

pr:
  drafts: false
  autoCancel: true
  branches:
    include:
      - '*'

variables:
  CI_REPO: DARMA-tasking/workflows
  CI_BRANCH: master

jobs:
- job: getMatrix
  pool:
    vmImage: 'ubuntu-latest'
  displayName: 'Get matrix'
  steps:
  - bash: |
      wget https://raw.githubusercontent.com/${{ variables.CI_REPO }}/refs/heads/${{ variables.CI_BRANCH }}/ci/shared/matrix/azure.json
      matrix=$(cat azure.json | jq -c '.matrix')
      echo "##vso[task.setvariable variable=matrix;isOutput=true]$matrix"
    displayName: 'Get matrix'
    name: getMatrixStep

- job: run
  displayName: 'Run'
  dependsOn: getMatrix
  strategy:
    matrix: $[ dependencies.getMatrix.outputs['getMatrixStep.matrix'] ]
  # displayName: ${{ label }} # contrary to github cannot get a way to inject label from matrix. azure just appends the item key automatically
  pool:
    vmImage: $(vmImage)
  timeoutInMinutes: 180
  steps:
  - bash: |
      echo "Environment=$(label)"
      echo "Runner=$(vmImage)"
      if [ "$(image)" != "" ]
      then
        echo "> With Docker Image=$(image)"
      else
        echo "> With Runner Setup=$(setup)"
      fi
    displayName: Display configuration

  - bash: |
      if [[ "$(image)" == "" ]]; then
        echo "::group::Setup in runner"
        echo "Set setup permissions..."
        sudo mkdir -p /opt
        sudo chown $(whoami) /opt
        wget -O setup.sh https://raw.githubusercontent.com/${{ variables.CI_REPO }}/refs/heads/${{ variables.CI_BRANCH }}/ci/shared/scripts/setup-$(setup).sh
        chmod +x setup.sh
        export WF_SETUP_ID=$(setup)
        ./setup.sh
        echo "::endgroup::"
      elif [[ "$(image)" != "" ]]; then
        echo "::group::Pull Docker image"
        docker image pull $(image)
        echo "::endgroup::"
      fi
    displayName: Set up dependencies


  - bash: |
      CMD="uname -a"
      if [[ "$(image)" == "" ]]
      then
        $CMD
      else
        docker run $(image) $CMD
      fi
    displayName: Run (example)

  - bash: |
      mkdir -p /opt/scripts
      cd /opt/scripts
      wget https://raw.githubusercontent.com/${{ variables.CI_REPO }}/refs/heads/${{ variables.CI_BRANCH }}/ci/shared/scripts/runner/set-variable.sh && chmod +x set-variable.sh
      wget https://raw.githubusercontent.com/${{ variables.CI_REPO }}/refs/heads/${{ variables.CI_BRANCH }}/ci/shared/scripts/runner/set-timestamps.sh && chmod +x set-timestamps.sh
      ./set-timestamps.sh
    displayName: Extract timestamps for caching

  - bash: |
      echo "TODO: implement cache usage if required by your project"
    displayName: Setup build cache (vt)

  - bash: |
      CMD='mkdir -p "/opt/vt/src" "/opt/vt/build/vt" ; \
        git clone https://github.com/DARMA-tasking/vt /opt/vt/src ; \
        cd /opt/vt/src ; \
        bash ci/build_cpp.sh /opt/vt/src /opt/vt/build ; \
        bash ci/test_cpp.sh /opt/vt/src /opt/vt/build ; \
        bash ci/build_vt_sample.sh /opt/vt/src /opt/vt/build ;
        rm -rf "/opt/vt/src" "/opt/vt/build"'

      echo "Running ${CMD}"

      if [[ "$(image)" == "" ]]; then
        bash -c "$CMD";
      else
        docker run \
          --name test-container \
          -e CI="1" \
          -e CMAKE_CXX_STANDARD="17" \
          -e CMAKE_BUILD_TYPE="Release" \
          $(image) \
          bash -c "$CMD"
        exit $(docker container inspect --format '{{.State.ExitCode}}' test-container)
      fi
    displayName: PR tests (vt)
    condition: or( contains(variables['label'], 'mpich'), contains(variables['label'], 'openmpi') )
