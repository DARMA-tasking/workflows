#!/usr/bin/env python

import copy
import os
import json

from util import resolve_conf
import yaml


class MatrixGenerator:
    """MatrixGenerator to generate a matrix file for Github and Azure Pipelines"""

    def generate(self):
        """Generate a matrix of runners and inner environments to be used by CI pipelines"""

        raw_config: dict = {}
        with open(os.path.dirname(__file__) + '/config.yaml', 'r', encoding="utf-8") as file:
            raw_config = yaml.safe_load(file)
        config = resolve_conf(copy.deepcopy(raw_config))

        for runner_type in ["github", "azure-pipelines"]:
            runners = [runner for runner in config.get("runners")
                if runner.get("type") == runner_type]

            matrix = []
            for runner in runners:
                setup = {}
                setup_in = runner.get("setup-in")
                image = None
                if setup_in == "docker":
                    image_name = (runner.get("image", {}).get("repository", "") + ":"
                                + runner.get("image", {}).get("tag", ""))
                    image = config.get("images").get(image_name)
                    if image is None:
                        raise RuntimeError(f"Image not found {runner.get('image')}")
                    setup_id = image.get("setup")
                elif setup_in == "runner" or setup_in is None:
                    setup_id = runner.get("setup")
                else:
                    raise ValueError(f"Invalid option {setup_id} for key `setup-in`."
                                       "Supported values are docker|runner (runner if unset)")
                setup = config.get("setup").get(setup_id)
                if setup is None:
                    raise ValueError(f"Environment {setup_id} not found")

                matrix_item = {
                    "label": setup.get("label", setup_id),
                    "runs-on": runner.get("runs-on")
                }

                if setup_in == "docker":
                    matrix_item["image"] = image.get("repository") + ":" + image.get("tag")
                else:
                    matrix_item["setup"] = setup_id

                matrix.append(matrix_item)

            data = json.dumps({
                "_comment": "This file has been generated. Please do not edit",
                "matrix": matrix}, indent=2)
            with open(
                os.path.dirname(__file__) + f"/shared/matrix/{runner_type}.json",
                'w+',
                encoding="utf-8"
            ) as file:
                file.write(data)

MatrixGenerator().generate()
