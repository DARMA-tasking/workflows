#!/usr/bin/env python

import copy
import os
import json

from util import resolve_conf
import yaml

AZURE_PIPELINES_OUTPUT_DIR="ci/azure"
GITHUB_PIPELINES_OUTPUT_DIR=".github/workflows"

class MatrixGenerator:
    """MatrixGenerator class for CI pipelines"""

    def generate(self):
        """Generate a matrix of runners and inner environments to be used by CI pipelines"""

        raw_config: dict = {}
        with open(os.path.dirname(__file__) + '/config.yaml', 'r', encoding="utf-8") as file:
            raw_config = yaml.safe_load(file)
        config = resolve_conf(copy.deepcopy(raw_config))

        image_tags = dict((k, v.get("repository") + ":" + k)
                           for k, v in config.get("images").items())

        for runner_type in ["github", "azure-pipelines"]:
            runners = dict((k, v) for k, v in config.get("runners").items() if v.get("type") == runner_type)

            matrix = []
            for (runner_id, runner) in runners.items():
                environment = {}
                if runner.get("environment_setup") == "docker":
                    image = config.get("images").get(runner.get("image"))
                    environment_id = image.get("environment")
                else: # local
                    environment_id = runner.get("environment")

                environment = config.get("environments").get(environment_id)
                matrix.append({
                    "id": runner_id,
                    "runs-on": runner.get("runs-on"),
                    "environment_setup": runner.get("environment_setup"),
                    "image": image_tags.get(runner.get("image", None), None),
                    "environment": {
                        "id": environment_id,
                        "label": environment.get("label", environment_id)
                    }
                })

            data = json.dumps({
                "_comment": "This file has been generated. Please do not edit",
                "matrix": matrix}, indent=2)
            with open(os.path.dirname(__file__) + f"/shared/workflows/{runner_type}-matrix.json", 'w+',
                        encoding="utf-8") as file:
                file.write(data)

MatrixGenerator().generate()
