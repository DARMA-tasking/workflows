#!/usr/bin/env python

import copy
import os
import uuid

from util import resolve_conf
import yaml

AZURE_PIPELINES_OUTPUT_DIR="ci/azure"
GITHUB_PIPELINES_OUTPUT_DIR=".github/workflows"

class DockerfileGenerator:
    """Dockerfile generator class"""

    def generate(self):
        """Start generation"""
        raw_config: dict = {}
        with open(os.path.dirname(__file__) + '/config.yaml', 'r', encoding="utf-8") as file:
            raw_config = yaml.safe_load(file)

        config = resolve_conf(copy.deepcopy(raw_config))
        images = config.get("images")

        # Step 1: list platforms and their configurations
        choices = {k: v for k, v in enumerate(images.keys())}
        print("Choose image: ")
        for i in choices:
            lbl = images.get(choices[i]).get('environment').get('label')
            print(f"\033[1m[{i}] {choices[i]}\033[0m\n    \033[3m{lbl}\033[0m")
        choice = input("> ")

        tag = choices[int(choice)]
        image = images.get(tag)

        print("Selected image:")
        print("---------------------------")
        print(yaml.dump(config.get("images").get(tag), default_flow_style=True))
        print("---------------------------")

        repo = image.get("repository")

        # Add compiler packages
        environment = image.get("environment")
        packages = []
        if environment.get("compiler") is not None:
            packages.append(environment.get("compiler").get("cc"))
            packages.append(environment.get("compiler").get("cxx"))

        # Add setup instructions
        instructions = []
        deps = environment.get("deps")
        for dep_id in deps:
            dep_args = deps.get(dep_id)
            # Install deps with arguments
            if dep_args is not None and len(dep_args) > 0:
                # dep script multiple call
                if isinstance(dep_args[0], list):
                    for (i, dep_args_sub) in enumerate(dep_args):
                        dep_args_sub = [ f"\"{a}\"" for a in dep_args_sub]
                        instructions.append(f"./{dep_id}.sh {' '.join(dep_args_sub)}")
                # dep script single call
                else:
                    dep_args = [ f"\"{a}\"" for a in dep_args]
                    instructions.append(f"./{dep_id}.sh {' '.join(dep_args)}")
            # No arguments
            else:
                instructions.append(f"./{dep_id}.sh")

        setup_script = ""
        with open(
            os.path.dirname(__file__) + '/scripts/setup-deps-template.sh',
            'r',
            encoding="utf-8"
        ) as file:
            setup_script = file.read()
        setup_script = setup_script.replace('%INSTRUCTIONS%', '\n'.join(instructions))

        setup_filename = f"~setup-deps-{uuid.uuid4()}.sh"
        setup_filepath = os.path.join(os.path.dirname(__file__), 'scripts', 'deps', setup_filename)

        with open(setup_filepath, "w+", encoding="utf-8") as f:
            f.write(setup_script)

        cmd = ("docker build"
                f" --tag {repo}:{tag}"
                f" --build-arg ARCH={image.get('arch')}"
                f" --build-arg BASE={image.get('base')}"
                 " --build-arg INSTALL_DEFAULT_PACKAGES=1"
                f" --build-arg PACKAGES=\"{' '.join(packages)}\""
                f" --build-arg SETUP_FILE=\'{setup_filename}\'"
                f" --file {os.path.dirname(__file__)}/docker/base.dockerfile ."
                " --progress=plain"
                # " --no-cache"
            )
        print(cmd)
        os.system(cmd)

        # remove temporary setup script
        os.remove(setup_filepath)

        # TODO: option to push to Dockerhub

DockerfileGenerator().generate()
