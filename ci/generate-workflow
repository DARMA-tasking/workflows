#!/usr/bin/env python

import copy
import os
from typing import Union

import yaml

AZURE_PIPELINES_OUTPUT_DIR="ci/azure"
GITHUB_PIPELINES_OUTPUT_DIR=".github/workflows"

class Generator:
    """Generator class"""

    def resolve(self, data: Union[dict,list], parameters: dict) -> dict:
        """Replace parameters variables '@parameter_name' by the corresponding parameter value recursively.
        """

        if isinstance(data, list):
            for i, item in enumerate(data):
                data[i] = self.resolve(item, parameters)
        else:
            if isinstance(data, dict):
                for item in data:
                    if isinstance(data.get(item), str) and data.get(item).startswith('@'):
                        parameter_name = data.get(item)[1:]
                        if not parameter_name in parameters.keys():
                            raise ValueError(f"Parameter with name {parameter_name} not found !")
                        data[item] = parameters.get(parameter_name)
                    else:
                        if isinstance(data[item], dict) or isinstance(data[item], list):
                            data[item] = self.resolve(data[item], parameters)
        return data

    def generate(self):
        """Start generation"""
        config: dict = {}
        with open(os.path.dirname(__file__) + '/platforms.yaml', 'r', encoding="utf-8") as file:
            config = yaml.safe_load(file)

        prms: dict = copy.deepcopy(config.get("parameters", {}))
        if prms:
            prms = self.resolve(prms, prms)

        platforms = self.resolve(copy.deepcopy(config.get("platforms", {})), prms)

        # Step 1: list platforms and their configurations
        choices = {k: v for k, v in enumerate(platforms.keys())}
        print("Choose platform: ")
        for i in choices:
            print(f"[{i}] {choices[i]}")
        choice = input("> ")

        platform_id = choices[int(choice)]
        platform = platforms.get(platform_id)
        platform_type = platform.get("type")
        platform_compiler = platform.get("compiler", {})

        print("Selected platform configuration:")
        print("---------------------------")
        print(yaml.dump(config.get("platforms").get(platform_id), default_flow_style=True))
        print("---------------------------")

        # print(f"Type: {platform_type}")
        # print(f"Compiler: Type={platform_compiler.get('type', '[unset]')}, C={platform_compiler.get('cc', '[unset]')}, CXX={platform_compiler.get('cxx', '[unset]')}")
        # print(f"Environments: Type={platform_compiler.get('type', '[unset]')}, C={platform_compiler.get('cc', '[unset]')}, CXX={platform_compiler.get('cxx', '[unset]')}")

        if platform_type == "docker-image":
            print("Generating docker image...")
        elif platform_type ==  "azure-pipelines-workflow":
            print("Generating azure pipelines workflow...")
        elif platform_type ==  "github-workflow":
            print("Generating azure pipelines workflow...")
        else:
            print(f"Unsupported platform type {platform_type}...")

Generator().generate()
