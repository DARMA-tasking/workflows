#!/usr/bin/env python

import copy
import os
from typing import List

from util import resolve_conf
import yaml

class SetupBuilder:
    """Dockerfile generator class"""

    def __instructions(self, dep_id, args: list) -> List[str]:
        """ Generate shell instructions to setup a dependency"""

        call_args = []
        if args is not None and len(args) > 0:
            if isinstance(args[0], list):
                instructions = []
                for (_, sub_args) in enumerate(args):
                    instructions.extend(self.__instructions(dep_id, sub_args))
                return instructions

            call_args = [ f"\"{a}\"" for a in args]

        cmd = f"./{dep_id}.sh"
        if len(call_args) > 0:
            cmd = f"{cmd} {' '.join(call_args)}"
        return [ cmd ]

    def build(self):
        """Build setup scripts for each setup configuration defined in config"""

        raw_config: dict = {}
        with open(os.path.dirname(__file__) + '/config.yaml', 'r', encoding="utf-8") as file:
            raw_config = yaml.safe_load(file)
        config = resolve_conf(copy.deepcopy(raw_config))

        setup = config.get("setup")

        for (env_id, environment) in setup.items():
            # Add compiler packages
            compiler = environment.get('compiler')
            packages = copy.deepcopy(environment.get("deps", {}).get("packages", []))
            compiler_packages = compiler.get("packages",
                                            [ c for c in [compiler.get("cc"), compiler.get("cxx")]
                                                            if c is not None])
            if compiler_packages is None or compiler_packages is False:
                compiler_packages = []

            for compiler_package in compiler_packages:
                if packages is None:
                    packages = []
                packages.append(compiler_package)

            if len(packages) > 0:
                environment["deps"]["packages"] = packages

            # generate install instructions and install dependencies commands
            instructions = []
            downloads = []
            for (dep_id, args) in environment.get("deps").items():
                downloads.append(f"wget $SCRIPTS_DEPS_URL/{dep_id}.sh")
                instructions.extend(self.__instructions(dep_id, args))

            setup_script = ""
            with open(
                os.path.dirname(__file__) + '/setup-template.sh',
                'r',
                encoding="utf-8"
            ) as file:
                setup_script = file.read()
            setup_script = setup_script.replace('%ENVIRONMENT_LABEL%', environment.get("label"))
            setup_script = setup_script.replace('%DEPS_DOWNLOAD%', '\n'.join(downloads))
            setup_script = setup_script.replace('%DEPS_INSTALL%', '\n'.join(instructions))

            setup_filename = f"setup-{env_id}.sh"
            setup_filepath = os.path.join(os.path.dirname(__file__),
                                          'shared', 'scripts', setup_filename)

            with open(setup_filepath, "w+", encoding="utf-8") as f:
                f.write(setup_script)

SetupBuilder().build()
