#!/usr/bin/env python

import copy
import os
from typing import List

from util import resolve_conf
import yaml

class SetupBuilder:
    """Dockerfile generator class"""

    def __instructions(self, dep_id, args: list) -> List[str]:
        """ Generate shell instructions to setup a dependency"""

        call_args = []
        if args is not None and len(args) > 0:
            if isinstance(args[0], list):
                instructions = []
                for (_, sub_args) in enumerate(args):
                    instructions.extend(self.__instructions(dep_id, sub_args))
                return instructions

            call_args = [ f"\"{a}\"" for a in args]

        return [ f"./deps/{dep_id}.sh {' '.join(call_args)}" ]

    def build(self):
        """Build environment setup scripts for each environments defined in config"""

        raw_config: dict = {}
        with open(os.path.dirname(__file__) + '/config.yaml', 'r', encoding="utf-8") as file:
            raw_config = yaml.safe_load(file)
        config = resolve_conf(copy.deepcopy(raw_config))

        environments = config.get("environments")

        for (env_id, environment) in environments.items():


            # Add compiler packages
            compiler = environment.get('compiler')
            packages = copy.deepcopy(environment.get("deps", {}).get("packages", []))
            if compiler is not None:
                if environment.get("deps") is None:
                    environment["deps"] = {}
                if packages is None:
                    environment["deps"]["packages"] = []

                if compiler.get("cc") is not None and not compiler.get("cc") in packages:
                    packages.append(compiler.get("cc"))
                if compiler.get("cxx") is not None and not compiler.get("cxx") in packages:
                    packages.append(compiler.get("cxx"))
                environment["deps"]["packages"] = packages

            # Add setup instructions
            instructions = []
            for (dep_id, args) in environment.get("deps").items():
                instructions.extend(self.__instructions(dep_id, args))

            setup_script = ""
            with open(
                os.path.dirname(__file__) + '/setup-template.sh',
                'r',
                encoding="utf-8"
            ) as file:
                setup_script = file.read()
            setup_script = setup_script.replace('%INSTRUCTIONS%', '\n'.join(instructions))

            setup_filename = f"setup-{env_id}.sh"
            setup_filepath = os.path.join(os.path.dirname(__file__),
                                          'shared', 'scripts', setup_filename)

            with open(setup_filepath, "w+", encoding="utf-8") as f:
                f.write(setup_script)

SetupBuilder().build()
