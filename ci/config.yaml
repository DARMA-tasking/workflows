# Configuration of the desired CI target platforms
# This way to separate environment definitions and runner definitions open the possibility run an environment on different runners
#
# This file defines all the configurations to test in CI
# NOTE: This is an investigation about a more complex but more scalable way to difine th platforms to target in CI.
# This file might be used as an input to scripts to
# - generate dockerfile environment files (for nodes with type='docker-image') and being able to build and push images
# - generate Github workflows yaml files stub (for nodes with type='github-runner')*
# - generate Azure pipelines yaml files stub (for nodes with type='azure-runner')*
# *In VT we have some specific stuff. We might want to add some compose logic with some generated pipeline stub and complementary
# project-specific pipeline

# THIS IS A LOT OF WORK BUT MIGHT BE VERY USEFUL

defaults:
  # default packages
  apt-packages: &apt-packages [
    curl, jq, less, libomp5, libunwind-dev make-guile, ninja-build,
    valgrind, zlib1g, zlib1g-dev, ccache, python3
  ]
  apk-packages: &apk-packages [
    alpine-sdk, autoconf, automake, binutils-dev, ccache, cmake, dpkg,
    libdwarf-dev, libunwind-dev, libtool, linux-headers, m4, make, ninja, zlib,
    zlib-dev
  ]
  brew-packages: &brew-packages [ ccache, coreutils ]
  pip-packages: &pip-packages "nanobind yaml setuptools"

  # default arguments for dependency installation scripts
  cmake-args: &cmake-args '3.30.3'
  openmpi-args: &openmpi-args ['v5.0', '5.0.4']
  zoltan-args: &zoltan-args [-j4', '/trilinos-install']
  mpich-args: &mpich-args ['4.0.2', '-j4']
  vtk-args: &vtk-args '9.3.1'

  # other
  docker-repository: &docker-repository lifflander1/vt 
  conda-py3-all: &conda-py3-all [
    ["3.8", *pip-packages], ["3.9", *pip-packages], ["3.10", *pip-packages],
    ["3.11", *pip-packages], ["3.12", *pip-packages]
  ]


# compilers:
#   clang-11: &clang-11 { type: clang, cc: clang-11, cxx: clang++-11, fc: flang-11, gcov: llvm-gcov }
#   gcc-9: &gcc-9 { type: gnu, cc: gcc-9, cxx: g++-9, fc: gfortran-9, gcov: gcov-9 }
#   gcc-11: &gcc-11 { type: gnu, cc: gcc-11, cxx: g++-11, fc: gfortran-11, gcov: gcov-11 }
#   gcc-12: &gcc-12 { type: gnu, cc: gcc-12, cxx: g++-12, fc: gfortran-12, gcov: gcov-12 }
#   gcc-13: &gcc-13 { type: gnu, cc: gcc-13, cxx: g++-13, fc: gfortran-13, gcov: gcov-13 }

setup:
  macos-14-clang-14:
    label: macos-14-arm64, clang-14
    env:
      CC: clang
      CXX: clang++
      GCOV: llvm-gcov
    deps:
      packages: *brew-packages

  amd64-alpine-clang-13-clang-13-cpp:
    label: alpine-3.16, clang-13
    env:
      CC: mpicc
      CXX: mpicxx
      GCOV: llvm-gcov
    deps:
      packages: !extend [ *apk-packages, clang, clang-dev ]
      mpich: ['3.3.2', '-j4', '', 'clang', 'clang++']

  #vt
  ubuntu-20.04-gcc-9-12.2.0-cpp:
    label: vt, gcc-9, ubuntu, mpich, zoltan
    env:
      CC: gcc-9
      CXX: g++-9
      GCOV: gcov
    # deps and versions to find in vt
    deps:
      packages: !extend [*apt-packages, gcc-9, g++-9]
      cmake: *cmake-args # 3.23.4 in vt but seems to be an error with vtk tiff build because error in Cmake CheckSize.
      openmpi: *openmpi-args
      zoltan: *zoltan-args
      mpich: *mpich-args

  # TODO: add the following
  # amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  ubuntu-24.04-gcc-13-vtk-9.3.1-py-3.all:
    label: vt-tv, gcc-13, ubuntu, vtk 9.3.1, py3[8-12]
    env:
      CC: gcc-13
      CXX: g++-13
      GCOV: gcov
    deps:
      packages: !extend [ *apt-packages, gcc-13, g++-13 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: *vtk-args

  ubuntu-22.04-gcc-12-vtk-9.3.0-py-3.all:
    label: vt-tv, gcc-12, ubuntu, vtk 9.3.0, py3[8-12]
    env:
      CC: gcc-12
      CXX: g++-12
      GCOV: gcov
    deps:
      packages: !extend [ *apt-packages, gcc-12, g++-12 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: [ '9.3.0' ]

  ubuntu-22.04-clang-11-vtk-9.2.2-py-3.all:
    label: vt-tv, clang-11, ubuntu, vtk 9.2.2, py3[8-12]
    env:
      CC: gcc-11
      CXX: g++-11
      GCOV: gcov
    deps:
      packages: !extend [*apt-packages, gcc-11, g++-11 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: [ '9.2.2' ]

  ubuntu-22.04-gcc-11-vtk-9.2.2-py-3.all:
    label: vt-tv, gcc-11, ubuntu, vtk 9.2.2, py3[8-12]
    env:
      CC: gcc-11
      CXX: g++-11
      GCOV: gcov
    deps:
      packages: !extend [*apt-packages, gcc-11, g++-11 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: [ '9.2.2' ]

images:
  # vt
  -
    repository: *docker-repository
    tag: amd64-ubuntu-20.04-gcc-9-12.2.0-cpp
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:20.04
    setup: ubuntu-20.04-gcc-9-12.2.0-cpp

  -
    repository: *docker-repository
    tag: amd64-alpine-clang-13-clang-13-cpp
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: alpine:3.16
    setup: amd64-alpine-clang-13-clang-13-cpp

  # TODO: add the following
  # amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  -
    repository: *docker-repository
    tag: ubuntu_24.04-gcc_13-vtk_9.3.1-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:24.04
    setup: ubuntu-24.04-gcc-13-vtk-9.3.1-py-3.all
  -
    repository: *docker-repository
    tag: ubuntu_22.04-gcc_12-vtk_9.3.0-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-gcc-12-vtk-9.3.0-py-3.all
  -
    repository: *docker-repository
    tag: ubuntu_22.04-clang_11-vtk_9.2.2-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-clang-11-vtk-9.2.2-py-3.all
  -
    repository: *docker-repository
    tag: ubuntu_22.04-gcc_11-vtk_9.2.2-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-gcc-11-vtk-9.2.2-py-3.all

runners:

  # no docker image
  -
    type: github
    runs-on: macos-14
    setup: macos-14-clang-14

  # vt
  -
    type: github
    runs-on: ubuntu-20.04
    image: { repository: "@defaults.docker-repository", tag: amd64-ubuntu-20.04-gcc-9-12.2.0-cpp }

  -
    type: github
    runs-on: ubuntu-latest
    image: { repository: "@defaults.docker-repository", tag: amd64-alpine-clang-13-clang-13-cpp }


  # TODO: add the following
  # amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  -
    type: github
    runs-on: ubuntu-24.04
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_24.04-gcc_13-vtk_9.3.1-py_3.all

  -
    type: github
    runs-on: ubuntu-22.04
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_22.04-gcc_12-vtk_9.3.0-py_3.all

  -
    type: github
    runs-on: ubuntu-22.04
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_22.04-clang_11-vtk_9.2.2-py_3.all

  -
    type: github
    runs-on: ubuntu-22.04
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_22.04-gcc_11-vtk_9.2.2-py_3.all
