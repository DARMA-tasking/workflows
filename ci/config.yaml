# Configuration of the desired CI target platforms
# This way to separate environment definitions and runner definitions open the possibility run an environment on different runners
#
# This file defines all the configurations to test in CI
# NOTE: This is an investigation about a more complex but more scalable way to difine th platforms to target in CI.
# This file might be used as an input to scripts to
# - generate dockerfile environment files (for nodes with type='docker-image') and being able to build and push images
# - generate Github workflows yaml files stub (for nodes with type='github-runner')*
# - generate Azure pipelines yaml files stub (for nodes with type='azure-runner')*
# *In VT we have some specific stuff. We might want to add some compose logic with some generated pipeline stub and complementary
# project-specific pipeline

# THIS IS A LOT OF WORK BUT MIGHT BE VERY USEFUL

defaults:
  apt-packages: [ca-certificates, curl, git, jq, less, libomp5, libunwind-dev make-guile,
      ninja-build, valgrind, wget, zlib1g, zlib1g-dev, ccache, python3]
  brew-packages: [ coreutils ]
  docker-repository: lifflander1/vt
  pip-packages: "nanobind yaml setuptools"
  conda-py3.all:
      - ["3.8", "@defaults.pip-packages"]
      - ["3.9", "@defaults.pip-packages"]
      - ["3.10", "@defaults.pip-packages"]
      - ["3.11", "@defaults.pip-packages"]
      - ["3.12", "@defaults.pip-packages"]

compilers:
  clang-11: { type: clang, cc: clang-11, cxx: clang++-11, fc: flang-11, gcov: llvm-gcov }
  gcc-9: { type: gnu, cc: gcc-9, cxx: g++-9, fc: gfortran-9, gcov: gcov-9 }
  gcc-11: { type: gnu, cc: gcc-11, cxx: g++-11, fc: gfortran-11, gcov: gcov-11 }
  gcc-12: { type: gnu, cc: gcc-12, cxx: g++-12, fc: gfortran-12, gcov: gcov-12 }
  gcc-13: { type: gnu, cc: gcc-13, cxx: g++-13, fc: gfortran-13, gcov: gcov-13 }

setup:
  # demo
  macos-14-clang-14-demo:
      label: demo, macos-14, clang-14
      compiler: { type: clang, cc: clang, cxx: clang++, gcov: llvm-gcov, packages: false }
      deps:
        packages: "@defaults.brew-packages"

  #vt
  ubuntu-20.04-gcc-9-12.2.0-cpp:
    label: vt, gcc-9, ubuntu, mpich, zoltan
    compiler: "@compilers.gcc-9"
    # deps and versions to find in vt
    deps:
      packages: "@defaults.apt-packages"
      cmake: ['3.23.4']
      openmpi: ['v5.0', '5.0.4']
      zoltan: [-j4', '/trilinos-install']
      mpich: ['4.0.2', '-j4']

  # TODO: add the following
  # amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-alpine-clang-13-clang-13-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  ubuntu-24.04-gcc-13-vtk-9.3.1-py-3.all:
    label: vt-tv, gcc-13, ubuntu, vtk 9.3.1, py3[8-12]
    compiler: "@compilers.gcc-13"
    deps:
      packages: "@defaults.apt-packages"
      mesa: ~
      conda: ~
      conda-python-env: "@defaults.conda-py3.all"
      cmake: ['3.30.3']
      vtk: [ '9.3.1' ]

  ubuntu-22.04-gcc-12-vtk-9.3.0-py-3.all:
    label: vt-tv, gcc-12, ubuntu, vtk 9.3.0, py3[8-12]
    compiler: "@compilers.gcc-12"
    deps:
      packages: "@defaults.apt-packages"
      mesa: ~
      conda: ~
      conda-python-env: "@defaults.conda-py3.all"
      cmake: ['3.30.3']
      vtk: [ '9.3.0' ]

  ubuntu-22.04-clang-11-vtk-9.2.2-py-3.all:
    label: vt-tv, clang-11, ubuntu, vtk 9.2.2, py3[8-12]
    compiler: "@compilers.clang-11"
    deps:
      packages: "@defaults.apt-packages"
      mesa: ~
      conda: ~
      conda-python-env: "@defaults.conda-py3.all"
      cmake: ['3.30.3']
      vtk: [ '9.2.2' ]

  ubuntu-22.04-gcc-11-vtk-9.2.2-py-3.all:
    label: vt-tv, gcc-11, ubuntu, vtk 9.2.2, py3[8-12]
    compiler: "@compilers.gcc-11"
    deps:
      packages: "@defaults.apt-packages"
      mesa: ~
      conda: ~
      conda-python-env: "@defaults.conda-py3.all"
      cmake: ['3.30.3']
      vtk: [ '9.2.2' ]

images:
  # vt
  -
    repository: "@defaults.docker-repository"
    tag: amd64-ubuntu-20.04-gcc-9-12.2.0-cpp
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:20.04
    setup: ubuntu-20.04-gcc-9-12.2.0-cpp

  # TODO: add the following
  # amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-alpine-clang-13-clang-13-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  -
    repository: "@defaults.docker-repository"
    tag: ubuntu_24.04-gcc_13-vtk_9.3.1-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:24.04
    setup: ubuntu-24.04-gcc-13-vtk-9.3.1-py-3.all
  -
    repository: "@defaults.docker-repository"
    tag: ubuntu_22.04-gcc_12-vtk_9.3.0-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-gcc-12-vtk-9.3.0-py-3.all
  -
    repository: "@defaults.docker-repository"
    tag: ubuntu_22.04-clang_11-vtk_9.2.2-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-clang-11-vtk-9.2.2-py-3.all
  -
    repository: "@defaults.docker-repository"
    tag: ubuntu_22.04-gcc_11-vtk_9.2.2-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-gcc-11-vtk-9.2.2-py-3.all

runners:

  # MacOS demo
  -
    type: github
    runs-on: macos-14
    setup-in: runner
    setup: macos-14-clang-14-demo

  # vt
  -
    type: github
    runs-on: ubuntu-20.04
    setup-in: docker
    image: { repository: "@defaults.docker-repository", tag: amd64-ubuntu-20.04-gcc-9-12.2.0-cpp }

  # TODO: add the following
  # amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-alpine-clang-13-clang-13-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  -
    type: github
    runs-on: ubuntu-24.04
    setup-in: docker
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_24.04-gcc_13-vtk_9.3.1-py_3.all

  -
    type: github
    runs-on: ubuntu-22.04
    setup-in: docker
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_22.04-gcc_12-vtk_9.3.0-py_3.all

  -
    type: github
    runs-on: ubuntu-22.04
    setup-in: docker
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_22.04-clang_11-vtk_9.2.2-py_3.all

  -
    type: github
    runs-on: ubuntu-22.04
    setup-in: docker
    image:
      repository: "@defaults.docker-repository"
      tag: ubuntu_22.04-gcc_11-vtk_9.2.2-py_3.all
