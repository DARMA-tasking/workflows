# CI Configuration describing in a centralized place all the DARMA test configurations
# that can be used by different projects.

# This configuration defines the build and testing platforms for each C++ or Python projects
# It defines 
# - Setup:           describes setup dependencies for each testing platform
# - Docker images:   describes Docker images and which setup should be used when building the image
#                    WIP: make it generic as it is not in vt
# - Runners:         describes CI matrices. Each CI matrix can be associated to a Docker image or not
#                    If not docker image is used then CI environment should be setup on the runner when a CI workflow is triggered.

# This file is used as input to
# - generate docker images
# - generate setup scripts for each CI environment
# - generate matrix files listing all environments to test.
# Setup scripts & dependencies scripts can be retrieved by any project from this repository

defaults:
  apt-packages: &apt-packages [
    curl, jq, less, libomp5, libunwind-dev make-guile, ninja-build,
    valgrind, zlib1g, zlib1g-dev, ccache, python3
  ]
  apk-packages: &apk-packages [
    alpine-sdk, autoconf, automake, binutils-dev, ccache, cmake, dpkg,
    libdwarf-dev, libunwind-dev, libtool, linux-headers, m4, make, ninja, zlib,
    zlib-dev
  ]
  brew-packages: &brew-packages [ ccache, coreutils, ninja ]
  pip-packages: &pip-packages "nanobind yaml setuptools"

  # default arguments for dependency installation scripts
  cmake-args: &cmake-args '3.30.3'
  openmpi-args: &openmpi-args ['v5.0', '5.0.4']
  zoltan-args: &zoltan-args [-j4', '/trilinos-install']
  vtk-args: &vtk-args '9.3.1'

  # other
  docker-repository: &docker-repository lifflander1/vt 
  conda-py3-all: &conda-py3-all [
    ["3.8", *pip-packages], ["3.9", *pip-packages], ["3.10", *pip-packages],
    ["3.11", *pip-packages], ["3.12", *pip-packages]
  ]

  env: &env
    CC: ~
    CXX: ~
    GCOV: gcov
    CMAKE_CXX_STANDARD: 17
    CMAKE_BUILD_TYPE: Release

setup:
  macos-14-clang-14:
    label: macos-14-arm64, clang-14
    env:
      <<: *env
      CC: clang
      CXX: clang++
      GCOV: llvm-gcov
    deps:
      packages: *brew-packages

  amd64-alpine-clang-13-clang-13-cpp:
    label: alpine-3.16, clang-13
    env:
      <<: *env
      CC: mpicc
      CXX: mpicxx
      GCOV: llvm-gcov
    deps:
      packages: !extend [ *apk-packages, clang, clang-dev ]
      mpich:
        env: { CC: clang, CXX: clang++ }
        args: ['3.3.2', '-j4']

  # setup from vt
  amd64-ubuntu-20.04-gcc-9-12.2.0-cpp: &amd64-ubuntu-20_04-gcc-9-12_2_0-cpp
    label: vt, gcc-9, ubuntu, cuda 12.2.0, mpich
    deps:
      packages: !extend [ *apt-packages, gcc-9, g++-9 ]
      cmake: *cmake-args # 3.23.4 in vt but seems to be an error with vtk tiff build because error in Cmake CheckSize.
      mpich:
        env: { CC: gcc-9, CXX: g++-9 }
        args: ['3.3.2', '-j4']
      nvcc_wrapper: ~
    env: { <<: *env, CC: gcc-9, CXX: nvcc_wrapper }

  amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
    <<: *amd64-ubuntu-20_04-gcc-9-12_2_0-cpp
    label: vt, gcc-9, ubuntu, cuda 11.2.2, mpich

  # TODO: add the following
  # :
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # setup from vt-tv
  ubuntu-24.04-gcc-13-vtk-9.3.1-py-3.all:
    label: vt-tv, gcc-13, ubuntu, vtk 9.3.1, py3[8-12]
    env:
      <<: *env
      CC: gcc-13
      CXX: g++-13
    deps:
      packages: !extend [ *apt-packages, gcc-13, g++-13 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: *vtk-args

  ubuntu-22.04-gcc-12-vtk-9.3.0-py-3.all:
    label: vt-tv, gcc-12, ubuntu, vtk 9.3.0, py3[8-12]
    env:
      <<: *env
      CC: gcc-12
      CXX: g++-12
    deps:
      packages: !extend [ *apt-packages, gcc-12, g++-12 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: [ '9.3.0' ]

  ubuntu-22.04-clang-11-vtk-9.2.2-py-3.all:
    label: vt-tv, clang-11, ubuntu, vtk 9.2.2, py3[8-12]
    env:
      <<: *env
      CC: gcc-11
      CXX: g++-11
    deps:
      packages: !extend [*apt-packages, gcc-11, g++-11 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: [ '9.2.2' ]

  ubuntu-22.04-gcc-11-vtk-9.2.2-py-3.all:
    label: vt-tv, gcc-11, ubuntu, vtk 9.2.2, py3[8-12]
    env:
      <<: *env
      CC: gcc-11
      CXX: g++-11
    deps:
      packages: !extend [*apt-packages, gcc-11, g++-11 ]
      mesa: ~
      conda: ~
      conda-python-env: *conda-py3-all
      cmake: *cmake-args
      vtk: [ '9.2.2' ]

images:

  # vt > basic
  -
    repository: *docker-repository
    tag: amd64-alpine-clang-13-clang-13-cpp
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: linux/amd64
    base: alpine:3.16
    setup: amd64-alpine-clang-13-clang-13-cpp

  # vt > nvidia
  -
    repository: *docker-repository
    tag: amd64-ubuntu-20.04-gcc-9-12.2.0-cpp
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: linux/amd64
    base: nvidia/cuda:12.2.0-devel-ubuntu20.04
    setup: amd64-ubuntu-20.04-gcc-9-12.2.0-cpp

  -
    repository: *docker-repository
    tag: amd64-ubuntu-20.04-gcc-9-11.2.2-cpp
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: linux/amd64
    base: nvidia/cuda:11.2.2-devel-ubuntu20.04
    setup: amd64-ubuntu-20.04-gcc-9-11.2.2-cpp
  

  # TODO: add the following
  # amd64-ubuntu-20.04-gcc-9-11.2.2-cpp:
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  -
    repository: *docker-repository
    tag: ubuntu_24.04-gcc_13-vtk_9.3.1-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: linux/amd64
    base: ubuntu:24.04
    setup: ubuntu-24.04-gcc-13-vtk-9.3.1-py-3.all
  -
    repository: *docker-repository
    tag: ubuntu_22.04-gcc_12-vtk_9.3.0-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: linux/amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-gcc-12-vtk-9.3.0-py-3.all
  -
    repository: *docker-repository
    tag: ubuntu_22.04-clang_11-vtk_9.2.2-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: linux/amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-clang-11-vtk-9.2.2-py-3.all
  -
    repository: *docker-repository
    tag: ubuntu_22.04-gcc_11-vtk_9.2.2-py_3.all
    dockerfile: ubuntu-cpp-base.dockerfile
    arch: linux/amd64
    base: ubuntu:22.04
    setup: ubuntu-22.04-gcc-11-vtk-9.2.2-py-3.all

runners:

  # no docker image
  -
    type: github
    runs-on: macos-14
    setup: macos-14-clang-14

  # vt > basic
  -
    type: github
    runs-on: ubuntu-latest
    image: { repository: *docker-repository, tag: amd64-alpine-clang-13-clang-13-cpp }

  # vt > cuda
  -
    type: github
    runs-on: ubuntu-20.04
    image: { repository: *docker-repository, tag: amd64-ubuntu-20.04-gcc-9-12.2.0-cpp }

  -
    type: github
    runs-on: ubuntu-20.04
    image: { repository: *docker-repository, tag: amd64-ubuntu-20.04-gcc-9-11.2.2-cpp }


  # TODO: add the following
  # amd64-ubuntu-20.04-icpc-icpc-cpp:
  # amd64-ubuntu-24.04-clang-16-clang-16-cpp:
  # develop:
  # amd64-ubuntu-22.04-clang-13-clang-13-cpp
  # amd64-ubuntu-22.04-gcc-12-gcc-12-vtk-cpp:
  # amd64-ubuntu-20.04-clang-10-clang-10-cpp:
  # amd64-ubuntu-20.04-icpx-icpx-cpp:
  # amd64-ubuntu-22.04-clang-12-clang-12-cpp:
  # amd64-ubuntu-22.04-gcc-11-gcc-11-cpp:
  # amd64-ubuntu-22.04-clang-14-clang-14-cpp:
  # amd64-ubuntu-22.04-clang-11-clang-11-cpp:
  # amd64-ubuntu-20.04-gcc-9-gcc-9-cpp:
  # amd64-ubuntu-22.04-gcc-12-gcc-12-cpp:
  # amd64-ubuntu-20.04-gcc-10-gcc-10-openmpi-cpp:
  # amd64-ubuntu-18.04-gcc-8-gcc-8-cpp:
  # amd64-ubuntu-20.04-clang-9-clang-9-cpp:

  # vt-tv
  -
    type: github
    runs-on: ubuntu-24.04
    image: { repository: *docker-repository, tag: ubuntu_24.04-gcc_13-vtk_9.3.1-py_3.all }

  -
    type: github
    runs-on: ubuntu-22.04
    image: { repository: *docker-repository, tag: ubuntu_22.04-gcc_12-vtk_9.3.0-py_3.all }

  -
    type: github
    runs-on: ubuntu-22.04
    image: { repository: *docker-repository, tag: ubuntu_22.04-clang_11-vtk_9.2.2-py_3.all }

  -
    type: github
    runs-on: ubuntu-22.04
    image: { repository: *docker-repository, tag: ubuntu_22.04-gcc_11-vtk_9.2.2-py_3.all }
